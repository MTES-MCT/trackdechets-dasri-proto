scalar DateTime

enum DasriRole {
  "Les BSD's dont je suis transporteur"
  TRANSPORTER
  "Les BSD's dont je suis la destination de traitement"
  RECIPIENT
  "Les BSD's dont je suis l'émetteur"
  EMITTER
}

enum DasriStatus {
  """
  Dasri à l'état de brouillon
  """
  DRAFT

  """
  BSD finalisé
  Les champs sont validés pour détecter des valeurs manquantes ou erronnées
  """
  SEALED

  "BSD envoyé vers l'établissement de destination"
  SENT

  "BSD reçu par l'établissement de destination"
  RECEIVED

  "BSD dont les déchets ont été traités"
  PROCESSED

  "Déchet refusé"
  REFUSED
}

"Type de packaging du déchet"
enum DasriPackagings {
  "Caisse en carton avec sac en plastique"
  BOITE_CARTON

  "Fûts ou jérrican à usage unique"
  FUT

  "Boîtes et Mini-collecteurs pour déchets perforants"
  BOITE_PERFORANTS

  "Grand emballage"
  GRAND_EMBALLAGE

  "Grand récipient pour vrac"
  VRAC

  "Autre"
  AUTRE
}

type DasriTransporter {
  "Établissement collecteur - transporteur"
  company: FormCompany

  "N° de récipissé"
  receipt: String

  "Département"
  department: String

  "Limite de validité du récipissé"
  validityLimit: DateTime
}

"Émetteur du BSD, Personne responsable de l'émimination des déchets (PRED)"
type DasriEmitter {
  "Établissement émetteur"
  company: FormCompany
  workSite: WorkSite
  handOverToTransporterAt: DateTime
}
type DasriRecipient {
  """
  Installation destinataire
  """
  company: FormCompany
}

"""
Collecteur transporteur
"""
type DasriTransporter {
  "Établissement de destination"
  company: FormCompany

  "N° de récipissé"
  receipt: String

  "Département"
  department: String

  "Limite de validité du récipissé"
  validityLimit: DateTime
}

"Informations sur le conditionnement Dasri"
type DasriPackagingInfo {
  "Type de conditionnement"
  type: DasriPackagings!

  "Description du conditionnement dans le cas où le type de conditionnement est `AUTRE`"
  other: String

  "Nombre de colis associés à ce conditionnement"
  quantity: Int!

  volume: Int!
}
type DasriWasteDetails {
  quantity: Int
  quantityType: QuantityType
  volume: Int
  packagingInfos: [DasriPackagingInfo!]
}

type DasriEmission {
  wasteCode: String
  wasteDetailsOnuCode: String
  wasteDetails: DasriWasteDetails
  handedOverAt: DateTime
  signedBy: String
  signedAt: DateTime
}

type DasriWasteAcceptation {
  status: String
  refusalReason: String
  refusedQuantity: Int
}

type DasriTransport {
  wasteDetails: DasriWasteDetails
  wasteAcceptation: DasriWasteAcceptation
  handedOverAt: DateTime
  takenOverAt: DateTime
  signedBy: String
  signedAt: DateTime
}

type DasriReception {
  wasteDetails: DasriWasteDetails
  wasteAcceptation: DasriWasteAcceptation
  signedBy: String
  signedAt: DateTime
  receivedAt: DateTime
  processingOperation: String
  processedAt: DateTime
}

type Dasri {
  id: ID!
  readableId: String!
  status: DasriStatus!
  createdAt: DateTime
  updatedAt: DateTime

  emitter: DasriEmitter
  emission: DasriEmission

  transporter: DasriTransporter
  transport: DasriTransport

  recipient: DasriRecipient
  reception: DasriReception
}

type Query {
  dasris(
    "SIRET d'un établissement dont je suis membre"
    siret: String

    """
    (Optionnel) PAGINATION
    Permet en conjonction avec `first` de paginer "en avant"
    (des bordereaux les plus récents aux bordereaux les plus anciens)
    Curseur après lequel les bordereaux doivent être retournés
    Attend un identifiant (propriété `id`) de BSD
    Défaut à vide, pour retourner les bordereaux les plus récents
    Le BSD précisé dans le curseur ne fait pas partie du résultat
    """
    after: ID
    """
    (Optionnel) PAGINATION
    Permet en conjonction avec `after` de paginer "en avant"
    (des bordereaux les plus récents aux bordereaux les plus anciens)
    Nombre de bordereaux retournés après le `cursorAfter`
    Défaut à 50, maximum à 500
    """
    first: Int

    """
    (Optionnel) PAGINATION
    Permet en conjonction avec `last` de paginer "en arrière"
    (des bordereaux les plus anciens aux bordereaux les plus récents)
    Curseur avant lequel les bordereaux doivent être retournés
    Attend un identifiant (propriété `id`) de BSD
    Défaut à vide, pour retourner les bordereaux les plus anciens
    Le BSD précisé dans le curseur ne fait pas partie du résultat
    """
    before: ID

    """
    (Optionnel) PAGINATION
    Nombre de bordereaux retournés avant le `before`
    Défaut à 50, maximum à 500
    """
    last: Int

    """
    (Optionnel) Retourne les BSD modifiés après la date
    Filtre sur la date de dernière modification
    Au format (YYYY-MM-DD)
    Par défaut vide, aucun filtre n'est appliqué
    """
    updatedAfter: String

    """
    (Optionnel) Filtre sur les statuts des bordereaux
    Si aucun filtre n'est passé, les bordereaux seront retournés quel que soit leur statut
    Défaut à vide.
    """
    status: [DasriStatus!]

    """
    (Optionnel) Siret d'une autre entreprise présente sur le bordereau
    Vous n'avez pas besoin d'être membre de cette entreprise.
    Seuls les bordereaux ou cette entreprise apparait (dans n'importe quel cadre) seront retournés.
    Défaut à vide.
    """
    siretPresentOnForm: String

    """
    (Optionnel) Code déchet pour affiner la recherche
    18 01 03* (DASRI d'origine humaine) ou 18 02 02* (DASRI d'origine animale)
    Défaut à vide.
    """
    wasteCode: String

    """
    (Optionnel) Filtre sur le role de demandeur dans le dasri
    Par exemple:
     - `roles: [TRANSPORTER]` renverra les bordereaux pour lesquels je suis transporteur
     - `roles: [EMITTER, RECIPIENT]` renverra les bordereaux dont je suis l'émetteur ou le destinataire final
    Voir `DasriRole` pour la liste des roles sur lesquels il est possible de filtrer.
    Si aucune filtre n'est passé, les bordereaux seront retournés quel que soit votre role dessus.
    Défaut à vide.
    """
    roles: [DasriRole!]
  ): [Dasri!]!
  dasri(
    "Identifiant opaque du BSD"
    id: ID
    "Identifiant lisible du BSD"
    readableId: String
  ): Dasri
}

type Mutation {
  "Crée un nouveau bordereau"
  dasriCreate(
    "Payload de création d'un bordereau"
    dasriCreateInput: DasriCreateInput!
  ): Dasri!
}
