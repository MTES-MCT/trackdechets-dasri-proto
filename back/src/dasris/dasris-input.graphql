input BsdasriPackagingInfoInput {
  "Type de conditionnement"
  type: BsdasriPackagings!

  "Description du conditionnement dans le cas où le type de conditionnement est `AUTRE`"
  other: String

  "Nombre de colis associés à ce conditionnement"
  volume: Int!

  "Nombre de colis associés à ce conditionnement"
  quantity: Int!
}

input WorkSiteInput {
  name: String
  address: String
  city: String
  postalCode: String
  infos: String
}

input BsdasriEmitterInput {
  "Établissement émetteur"
  company: CompanyInput
  workSite: WorkSiteInput
  "Champ libre émetteur"
  customInfo: String
}

input BsdasriWasteDetailInput {
  quantity: Int
  quantityType: QuantityType
  packagingInfos: [BsdasriPackagingInfoInput!]
  onuCode: String
}
input BsdasriRecipientWasteDetailInput {
  quantity: Int
  volume: Int
}
input BsdasriWasteAcceptationInput {
  status: WasteAcceptationStatusInput
  refusalReason: String
  refusedQuantity: Int
}
input BsdasriEmissionInput {
  wasteCode: String
  wasteDetailsOnuCode: String
  wasteDetails: BsdasriWasteDetailInput
  handedOverAt: DateTime
}
input BsdasriTransportInput {
  wasteDetails: BsdasriWasteDetailInput
  takenOverAt: DateTime
  handedOverAt: DateTime
  wasteAcceptation: BsdasriWasteAcceptationInput
}

input BsdasriTransporterInput {
  "Établissement collecteur - transporteur"
  company: CompanyInput

  "N° de récipissé"
  receipt: String

  "Département"
  receiptDepartment: String

  "Limite de validité du récipissé"
  receiptValidityLimit: DateTime

  "Champ libre transporteur"
  customInfo: String
}

input BsdasriRecipientInput {
  "Établissement émetteur"
  company: CompanyInput

  "Champ libre transporteur"
  customInfo: String
}

input BsdasriReceptionInput {
  wasteDetails: BsdasriWasteDetailInput
  receivedAt: DateTime
}

input BsdasriOperationInput {
  processingOperation: String
  processedAt: DateTime
}

input BsdasriInput {
  customId: String
  emitter: BsdasriEmitterInput
  emission: BsdasriEmissionInput
  transporter: BsdasriTransporterInput
  transport: BsdasriTransportInput
  recipient: BsdasriRecipientInput
  reception: BsdasriReceptionInput
  operation: BsdasriOperationInput
}

"Payload de regroupement"
input RegroupedBsdasriInput {
  "Identifiant unique du bordereau"
  id: ID
}

input BsdasriCreateInput {
  "Identifiant custom"
  customId: String

  emitter: BsdasriEmitterInput
  emission: BsdasriEmissionInput
  transporter: BsdasriTransporterInput
  transport: BsdasriTransportInput
  recipient: BsdasriRecipientInput
  reception: BsdasriReceptionInput
  operation: BsdasriOperationInput

  regroupedBsdasris: [RegroupedBsdasriInput]
}

input BsdasriUpdateInput {
  "Identifiant opaque"
  id: ID!

  "Identifiant custom"
  customId: String

  emitter: BsdasriEmitterInput
  emission: BsdasriEmissionInput
  transporter: BsdasriTransporterInput
  transport: BsdasriTransportInput
  recipient: BsdasriRecipientInput
  reception: BsdasriReceptionInput
  operation: BsdasriOperationInput

  regroupedBsdasris: [RegroupedBsdasriInput]
}

enum BsdasriSignatureType {
  "Signature du cadre émetteur (PRED)"
  EMISSION

  "Signature du cadre émetteur (PRED) par le transporteur, grâce au code de sécurité de l'émetteur"
  EMISSION_WITH_SECRET_CODE

  "Signature du cadre collecteur transporteur"
  TRANSPORT

  "Signature de la réception du déchet"
  RECEPTION

  "Signature du traitement du déchet"
  OPERATION
}

input BsdasriSignatureInput {
  type: BsdasriSignatureType!
  signedBy: String!
  securityCode: Int
}
